//DragonblightClient uses typescript to feature API calls from the backend to the frontend.
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export module DragonblightClient {

    export class Client {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            this.http = http ? http : window as any;
            this.baseUrl = baseUrl ?? "";
        }
    
        /**
         * @return Success
         */
        get3v3Ladder(): Promise<PvpLeaderboardEntry[]> {
            let url_ = this.baseUrl + "/PvpLeaderboard/Get3v3Ladder";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGet3v3Ladder(_response);
            });
        }
    
        protected processGet3v3Ladder(response: Response): Promise<PvpLeaderboardEntry[]> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PvpLeaderboardEntry[];
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<PvpLeaderboardEntry[]>(null as any);
        }
    
        /**
         * @return Success
         */
        get2v2Ladder(): Promise<PvpLeaderboardEntry[]> {
            let url_ = this.baseUrl + "/PvpLeaderboard/Get2v2Ladder";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGet2v2Ladder(_response);
            });
        }
    
        protected processGet2v2Ladder(response: Response): Promise<PvpLeaderboardEntry[]> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PvpLeaderboardEntry[];
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<PvpLeaderboardEntry[]>(null as any);
        }
    
        /**
         * @return Success
         */
        get5v5Ladder(): Promise<PvpLeaderboardEntry[]> {
            let url_ = this.baseUrl + "/PvpLeaderboard/Get5v5Ladder";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGet5v5Ladder(_response);
            });
        }
    
        protected processGet5v5Ladder(response: Response): Promise<PvpLeaderboardEntry[]> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PvpLeaderboardEntry[];
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<PvpLeaderboardEntry[]>(null as any);
        }
    
        /**
         * @return Success
         */
        getRBGLadder(): Promise<PvpLeaderboardEntry[]> {
            let url_ = this.baseUrl + "/PvpLeaderboard/GetRBGLadder";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGetRBGLadder(_response);
            });
        }
    
        protected processGetRBGLadder(response: Response): Promise<PvpLeaderboardEntry[]> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as PvpLeaderboardEntry[];
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<PvpLeaderboardEntry[]>(null as any);
        }
    
        /**
         * @param search (optional) 
         * @return Success
         */
        searchChar(search: string | undefined): Promise<CharacterProfileSummary[]> {
            let url_ = this.baseUrl + "/Search/SearchChar?";
            if (search === null)
                throw new Error("The parameter 'search' cannot be null.");
            else if (search !== undefined)
                url_ += "search=" + encodeURIComponent("" + search) + "&";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processSearchChar(_response);
            });
        }
    
        protected processSearchChar(response: Response): Promise<CharacterProfileSummary[]> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CharacterProfileSummary[];
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<CharacterProfileSummary[]>(null as any);
        }
    }
    
    export interface CharacterProfileSummary {
        _links?: Links;
        id?: number;
        name?: string | undefined;
        gender?: EnumType;
        faction?: EnumType;
        race?: PlayableRaceReference;
        character_class?: PlayableClassReference;
        active_spec?: PlayableSpecializationReference;
        realm?: RealmReference;
        guild?: GuildReference;
        level?: number;
        experience?: number;
        achievement_points?: number;
        achievements?: Self;
        titles?: Self;
        pvp_summary?: Self;
        encounters?: Self;
        media?: Self;
        last_login_timestamp?: Date;
        average_item_level?: number;
        equipped_item_level?: number;
        specializations?: Self;
        statistics?: Self;
        mythic_keystone_profile?: Self;
        equipment?: Self;
        appearance?: Self;
        collections?: Self;
        active_title?: TitleReferenceWithDisplayString;
        reputations?: Self;
        quests?: Self;
        achievements_statistics?: Self;
        professions?: Self;
        covenant_progress?: CovenantProgress;
    }
    
    export interface CovenantProgress {
        chosen_covenant?: CovenantReference;
        renown_level?: number;
        soulbinds?: Self;
    }
    
    export interface CovenantReference {
        key?: Self;
        name?: string | undefined;
        id?: number;
    }
    
    export interface EnumType {
        type?: string | undefined;
        name?: string | undefined;
    }
    
    export interface EnumTypeWithoutName {
        type?: string | undefined;
    }
    
    export interface GuildReference {
        key?: Self;
        name?: string | undefined;
        id?: number;
        realm?: RealmReference;
        faction?: EnumType;
    }
    
    export interface Links {
        self?: Self;
    }
    
    export interface PlayableClassReference {
        key?: Self;
        name?: string | undefined;
        id?: number;
    }
    
    export interface PlayableRaceReference {
        key?: Self;
        name?: string | undefined;
        id?: number;
    }
    
    export interface PlayableSpecializationReference {
        key?: Self;
        name?: string | undefined;
        id?: number;
    }
    
    export interface Profile {
        name?: string | undefined;
        id?: number;
        realm?: RealmReferenceWithoutName;
    }
    
    export interface PvpLeaderboardEntry {
        character?: Profile;
        faction?: EnumTypeWithoutName;
        rank?: number;
        rating?: number;
        season_match_statistics?: SeasonMatchStatistics;
        tier?: PvpTierReferenceWithoutName;
    }
    
    export interface PvpTierReferenceWithoutName {
        key?: Self;
        id?: number;
    }
    
    export interface RealmReference {
        key?: Self;
        name?: string | undefined;
        id?: number;
        slug?: string | undefined;
    }
    
    export interface RealmReferenceWithoutName {
        key?: Self;
        id?: number;
        slug?: string | undefined;
    }
    
    export interface SeasonMatchStatistics {
        played?: number;
        won?: number;
        lost?: number;
    }
    
    export interface Self {
        href?: string | undefined;
    }
    
    export interface TitleReferenceWithDisplayString {
        key?: Self;
        name?: string | undefined;
        id?: number;
        display_string?: string | undefined;
    }
    
    export class ApiException extends Error {
        override message: string;
        status: number;
        response: string;
        headers: { [key: string]: any; };
        result: any;
    
        constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
            super();
    
            this.message = message;
            this.status = status;
            this.response = response;
            this.headers = headers;
            this.result = result;
        }
    
        protected isApiException = true;
    
        static isApiException(obj: any): obj is ApiException {
            return obj.isApiException === true;
        }
    }
    
    function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new ApiException(message, status, response, headers, null);
    }
    
    }